server:
  port: 9004
spring:
  application:
    name: zillow-detail
  profiles:
    active: mongodb, fdfsBasePathNginx ,redis
  cloud:
    config:
      uri: http://localhost:9010
      label: master
      name: zillow
      profile: dev
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
#      defaultZone: http://111.231.19.137:8761/eureka/

zillow:
  fdfsBasePath:
    nginx:
      prefix: http://111.231.19.137:8888/

logging:
  pattern:
    console: '%d{MM/dd HH:mm:ss.SSS} %clr(%-5level) ---  [%-15thread] %cyan(%-50logger{50}):%msg%n'


#resilience4j config
resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true
      slidingWindowSize: 10
      # do no decision if there is no even 5 calls
      minimumNumberOfCalls: 5
      permittedNumberOfCallsInHalfOpenState: 3
      # true: auto transfer to half open, no trigger
      # false: auto transfer to half open only when triggered
      automaticTransitionFromOpenToHalfOpenEnabled: true
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.util.concurrent.TimeoutException
        - java.io.IOException
      ignoreExceptions:
      # - com.zillow.detail.exception.BusinessException

    shared:
      slidingWindowSize: 100
      permittedNumberOfCallsInHalfOpenState: 30
      waitDurationInOpenState: 1s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      ignoreExceptions:
      # - com.example.detail.exception.BusinessException
  instances:
    backendA:
      baseConfig: default
    backendB:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 10
      permittedNumberOfCallsInHalfOpenState: 3
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      # recordFailurePredicate: com.zillow.detail.exception.RecordFailurePredicate


#ratelimiter
resilience4j.ratelimiter:
  configs:
    default:
      registerHealthIndicator: false
      limitForPeriod: 1
      limitRefreshPeriod: 1s
      timeoutDuration: 0
      eventConsumerBufferSize: 100
  instances:
    backendA:
      baseConfig: default
    backendB:
      limitForPeriod: 1
      limitRefreshPeriod: 1s
      timeoutDuration: 3s


